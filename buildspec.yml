version: 0.2

# This file configures how CodeBuild works
# The environment variables were set when setting up the code build project in AWS console

phases:
  pre_build:
    commands:
      # Get the permissions to store a docker image onto ECR (uses aws cli to get auth information for ECR and passes that to docker login so we can access images on ECR)
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      # Set variables referenced in this file in the pre-build step
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7) # $CODEBUILD_RESOLVED_SOURCE_VERSION will give you the commit hash of the revision being built, regardless of whether your source is CodeCommit or GitHub, etc.
      - IMAGE_TAG=${COMMIT_HASH:=latest} # use a commit hash with "latest" for the tag to give us unique image tags (ids)
  build:
    commands:
      # Create the actual docker image
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG 
  post_build:
    commands:
      # in the post build the built image is pushed into ECR
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest # We always will have a latest tag pointing to the latest image here pushed
      - docker push $REPOSITORY_URI:$IMAGE_TAG # gives us a history of images produced linked to specific commits
      - echo Writing image definitions file...
      # Create ECS specific file for CodeDeploy use
      - printf '[{"name":"%s","imageUri":"%s"}]' "$IMAGE_REPO_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json # this is ECS specific - it is a file used by CodeDeploy
artifacts:
  # because this is defined as an artifact in this buildspec, it will be stored in the artifact S3 bucket and will be available to the next step in the CodePipeline stage (deploying)
  files: imagedefinitions.json